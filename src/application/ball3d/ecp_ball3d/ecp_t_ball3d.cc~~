#include "ecp_t_ball3d.h"

// generators to be register headers

#include "../generator_ball3d/ecp_g_ball3d.h"
// ecp_robots headers
// #include "robot/irp6ot_m/ecp_r_irp6ot_m.h"
#include "robot/irp6p_m/ecp_r_irp6p_m.h"


namespace mrrocpp {
namespace ecp {
namespace common {
namespace task {

ball3d::ball3d(lib::configurator &_config) : common::task::task(_config)
{
	// the robot is choose dependently on the section of configuration file sent as argv[4]
// 	if (config.robot_name == lib::irp6ot_m::ROBOT_NAME) {
// 		ecp_m_robot = (boost::shared_ptr <robot_t>) new irp6ot_m::robot(*this);
// 	} /*else */
	if(config.robot_name == lib::irp6p_m::ROBOT_NAME) 
	{
		ecp_m_robot = (boost::shared_ptr <robot_t>) new irp6p_m::robot(*this);
	} 
	else 
	{
		throw std::runtime_error("Robot not supported");
	}

	// generator registration
   	register_generator(new generator::ball3d(*this));

	sr_ecp_msg->message("ecp loaded");
	delete b3d;
}

}
}

namespace common {
namespace task {

task_base* return_created_ecp_task(lib::configurator &_config)
{
	return new common::task::ball3d(_config);
}

} // namespace task
} // namespace common
} // namespace ecp
} // namespace mrrocpp
